{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["checkStatus","response","status","text","error","Error","statusText","nerBackgroundColorMap","SET","ORGANIZATION","DATE","NUMBER","LOCATION","ORDINAL","MISC","PERSON","DURATION","MONEY","PERCENT","TIME","sentenceRelationshipKeywordsMap","Performance change","Strategic change","Board member change","Financial key indicators","sentenceRelationshipColorMap","App","state","fileID","fileSentences","fileTextFetchStatus","_this2","this","fetchTextResult","fetch","serverAddress","method","then","data","setState","window","setTimeout","JSON","parse","map","sentences","flat","ners","Set","forEach","sentence","tokens","token","add","ner","console","log","catch","react_default","a","createElement","className","Tabs_default","defaultActiveKey","id","Tab_default","eventKey","title","es","multiple","styles","width","height","border","onDrop","acceptedFiles","formData","FormData","append","fileSize","size","body","newFileID","_ref","getRootProps","getInputProps","Form_default","Control","as","rows","value","onChange","event","target","Button_default","variant","onClick","url","URL","params","search","URLSearchParams","s_index","relation","openie","length","originalText","keyword","indexOf","sentenceRelationship","OverlayTrigger_default","trigger","placement","key","overlay","Popover_default","concat","style","backgroundColor","w_index","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab416b7b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover';\nimport Tab from 'react-bootstrap/Tab';\nimport Tabs from 'react-bootstrap/Tabs';\n\nimport './App.css';\n\n\nconst serverAddress = 'http://35.178.211.71:8080';\n\nconst checkStatus = (response => {\n  if (response.status >= 200 && response.status < 300) {\n    return response.text()\n  } else {\n    var error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n});\n\nconst nerBackgroundColorMap = {\n  // 'O': 'green',\n  'SET': 'red',\n  'ORGANIZATION': 'green',\n  'DATE': 'blue',\n  'NUMBER': 'yellow',\n  'LOCATION': 'gray',\n  'ORDINAL': 'coral',\n  'MISC': 'fuchsia',\n  'PERSON': 'gold',\n  'DURATION': 'blueviolet',\n  'MONEY': 'blanchedalmond',\n  'PERCENT': 'aquamarine',\n  'TIME': 'aqua',\n}\nconst textBackgroundColor = (ner) => {\n  return nerBackgroundColorMap[ner] || 'transparent';\n}\n\nconst sentenceRelationshipKeywordsMap = {\n  'Performance change': ['increased', 'declined', 'reduced', 'decreased', 'grow'],\n  'Strategic change': ['strategy', 'target', 'aiming', 'transfer', 'reorganization', 'restructure'],\n  'Board member change': ['appointed', 'new', 'vote', 'chairman', 'remuneration'],\n  'Financial key indicators': ['cost', 'debt', 'EBITDA', 'sales', 'revenue', 'stock', 'tax', 'dividend', 'profit', 'cash flow'],\n}\nconst sentenceRelationship = (sentence) => {\n  if (sentence.openie.length === 0) return null;\n  const tokens = sentence.tokens.map(token => token.originalText)\n  for (let relation in sentenceRelationshipKeywordsMap) {\n    for (let keyword in sentenceRelationshipKeywordsMap[relation]) {\n      if(tokens.indexOf(keyword) > -1) {\n        return relation;\n      }\n    }\n  }\n  return null;\n}\n\nconst sentenceRelationshipColorMap = {\n  'Performance change': 'gray',\n  'Strategic change': 'gray',\n  'Board member change': 'gray',\n  'Financial key indicators': 'gray',\n}\n\nclass App extends Component<Props, State> {\n  state = {\n    fileID: '',\n    fileSentences: [],\n    fileTextFetchStatus: '',\n    text: '',\n  };\n\n  render() {\n    const fetchTextResult = (fileID => {\n      fetch(serverAddress+'/analyze_fetch?uuid='+fileID, {\n        method: 'GET'\n      })\n      .then(checkStatus)\n      .then((data => {\n        // console.log(data)\n        if(data === 'In the progress') {\n          // this.setState(Object.assign({fileTextFetchStatus: data}, this.state))\n\n          this.setState({\n            fileID: this.state.fileID,\n            fileSentences: this.state.fileSentences,\n            fileTextFetchStatus: data,\n            text: this.state.text,\n          });\n          window.setTimeout(() => fetchTextResult(fileID), 10000);\n          // window.setTimeout(() => fetchTextResult(fileID), 10000);\n        }else{\n          // debugger\n          const fileSentences = JSON.parse(data).map(data => data.sentences).flat()\n          // console.log(fileSentences)\n          // this.setState(Object.assign({fileSentences: fileSentences}, this.state))\n\n          // print out list of NER\n          const ners = new Set()\n          fileSentences.forEach(sentence => {\n            sentence.tokens.forEach(token => {\n              ners.add(token.ner)\n            })\n          })\n          console.log(ners)\n\n          this.setState({\n            fileID: this.state.fileID,\n            fileSentences: fileSentences,\n            fileTextFetchStatus: 'completed',\n            text: this.state.text,\n          });\n        }\n      })).catch((error => {\n        console.log('request failed', error)\n      }))\n    })\n\n    const handleChange = (event) => {\n      this.setState({\n        fileID: this.state.fileID,\n        fileSentences: this.state.fileSentences,\n        fileTextFetchStatus: this.state.fileTextFetchStatus,\n        text: event.target.value,\n      })\n    }\n\n    return (\n      <div className=\"App\">\n        <Tabs defaultActiveKey=\"file_upload\" id=\"uncontrolled-tab-example\">\n          <Tab eventKey=\"file_upload\" title=\"File Upload\">\n            <Dropzone\n              multiple={false}\n              styles={{\n                width : '100%',\n                height : '20%',\n                border : '1px solid black',\n              }}\n              onDrop={acceptedFiles => {\n                  const formData = new FormData();\n                  formData.append('file', acceptedFiles[0]);\n                  const fileSize = acceptedFiles[0].size;\n                  // debugger\n\n                  fetch(serverAddress, {\n                    method: 'POST',\n                    body: formData\n                  })\n                  .then(checkStatus)\n                  .then((fileID => {\n                    // short\n                    // const newFileID = 'a6fcc05e-f4c3-41e2-9a65-56ed48344e24'\n                    // long\n                    // debugger\n                    // const newFileID = '77fd8ba1-64ba-4e58-8bcd-b800f6b7bc16'\n                    const newFileID = fileID;\n                    // this.setState(Object.assign({fileID: fileID}, this.state))\n                    // const state = Object.assign({fileID: fileID}, this.state)\n                    // debugger\n                    this.setState({\n                      fileID: newFileID,\n                      fileSentences: this.state.fileSentences,\n                      fileTextFetchStatus: this.state.fileTextFetchStatus,\n                    });\n                    // Heuristic, 1 page PDF is 200K, wait 2 seconds\n                    window.setTimeout(() => fetchTextResult(newFileID), fileSize / 100);\n                    // fetchTextResult(newFileID);\n                  })).catch((error => {\n                    console.log('request failed', error)\n                  }))\n                }\n              }\n            >\n              {({getRootProps, getInputProps}) => (\n                <section>\n                  <div {...getRootProps()}>\n                    <input {...getInputProps()} />\n                    <p>Drag 'n' drop some files here, or click to select files</p>\n                  </div>\n                </section>\n              )}\n            </Dropzone>\n          </Tab>\n          <Tab eventKey=\"text_upload\" title=\"Text Upload\">\n            <Form>\n              <Form.Control as=\"textarea\" rows=\"20\"\n                value={this.state.text}\n                onChange={handleChange}\n              />\n              <Button\n                variant=\"primary\"\n                onClick={ () => {\n                  const url = new URL(serverAddress+'/upload_text')\n                  const params = {text:this.state.text}\n\n                  url.search = new URLSearchParams(params)\n\n                  fetch(url)\n                  .then(checkStatus)\n                  .then((fileID => {\n                    // short\n                    // const newFileID = 'a6fcc05e-f4c3-41e2-9a65-56ed48344e24'\n                    // long\n                    // debugger\n                    // const newFileID = '77fd8ba1-64ba-4e58-8bcd-b800f6b7bc16'\n                    const newFileID = fileID;\n                    // this.setState(Object.assign({fileID: fileID}, this.state))\n                    // const state = Object.assign({fileID: fileID}, this.state)\n                    // debugger\n                    this.setState({\n                      fileID: newFileID,\n                      fileSentences: this.state.fileSentences,\n                      fileTextFetchStatus: this.state.fileTextFetchStatus,\n                    });\n                    // Heuristic, 1 page PDF is 200K, wait 2 seconds\n                    window.setTimeout(() => fetchTextResult(newFileID), 1000);\n                    // fetchTextResult(newFileID);\n                  })).catch((error => {\n                    console.log('request failed', error)\n                  }))\n                }}\n              >\n                Submit\n              </Button>\n            </Form>\n          </Tab>\n        </Tabs>\n\n        <br></br>\n\n        Fetching File ID: {this.state.fileID}\n        <div/>\n        fileTextFetchStatus: {this.state.fileTextFetchStatus}\n        <div/>\n        Text:\n        <div>\n          {\n            // JSON.stringify( this.state.fileSentences )\n          }\n          {\n            this.state.fileSentences.map((sentence, s_index) => {\n              const relation = sentenceRelationship(sentence);\n              return <OverlayTrigger trigger={relation ? 'hover' : 'null'} placement=\"top\"\n                key={ s_index }\n                overlay={\n                  <Popover\n                    id={`popover-positioned-${s_index}`}\n                    // title={`Popover ${placement}`}\n                  >\n                    {\n                      relation ? relation : ''\n                    }\n                  </Popover>\n                }\n              >\n              <span\n                style={{\n                  backgroundColor: relation ? sentenceRelationshipColorMap(relation) : \"transparent\"\n                }}\n              >\n              {\n                sentence.tokens.map((token, w_index) => {\n                  return <span\n                    key={ s_index+'_'+w_index }\n                    // className={word.ner}\n                    style={{\n                      backgroundColor: textBackgroundColor(token.ner)\n                    }}\n                  >\n                    {token.originalText + \" \"}\n                  </span>;\n                })\n              }\n              </span>\n              </OverlayTrigger>\n            })\n          }\n        </div>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}